// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Project {
    
    // Structure to represent a candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
        bool exists;
    }
    
    // Structure to represent a voter
    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint votedCandidateId;
    }
    
    // State variables
    address public admin;
    mapping(uint => Candidate) public candidates;
    mapping(address => Voter) public voters;
    uint public candidatesCount;
    uint public totalVotes;
    bool public votingActive;
    string public electionTitle;
    
    // Events
    event CandidateAdded(uint candidateId, string name);
    event VoterRegistered(address voter);
    event VoteCasted(address voter, uint candidateId);
    event VotingStarted();
    event VotingEnded();
    
    // Modifiers
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    modifier votingIsActive() {
        require(votingActive, "Voting is not active");
        _;
    }
    
    modifier votingIsInactive() {
        require(!votingActive, "Voting is currently active");
        _;
    }
    
    // Constructor
    constructor(string memory _electionTitle) {
        admin = msg.sender;
        electionTitle = _electionTitle;
        votingActive = false;
        candidatesCount = 0;
        totalVotes = 0;
    }
    
    // Core Function 1: Register voters and add candidates
    function registerVoter(address _voter) public onlyAdmin votingIsInactive {
        require(!voters[_voter].isRegistered, "Voter is already registered");
        
        voters[_voter] = Voter({
            isRegistered: true,
            hasVoted: false,
            votedCandidateId: 0
        });
        
        emit VoterRegistered(_voter);
    }
    
    function addCandidate(string memory _name) public onlyAdmin votingIsInactive {
        require(bytes(_name).length > 0, "Candidate name cannot be empty");
        
        candidatesCount++;
        candidates[candidatesCount] = Candidate({
            id: candidatesCount,
            name: _name,
            voteCount: 0,
            exists: true
        });
        
        emit CandidateAdded(candidatesCount, _name);
    }
    
    // Core Function 2: Cast vote
    function castVote(uint _candidateId) public votingIsActive {
        require(voters[msg.sender].isRegistered, "You are not registered to vote");
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(candidates[_candidateId].exists, "Invalid candidate");
        
        // Update voter status
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidateId = _candidateId;
        
        // Update candidate vote count
        candidates[_candidateId].voteCount++;
        totalVotes++;
        
        emit VoteCasted(msg.sender, _candidateId);
    }
    
    // Core Function 3: Get election results and manage voting state
    function getResults() public view returns (string[] memory names, uint[] memory voteCounts) {
        names = new string[](candidatesCount);
        voteCounts = new uint[](candidatesCount);
        
        for (uint i = 1; i <= candidatesCount; i++) {
            names[i-1] = candidates[i].name;
            voteCounts[i-1] = candidates[i].voteCount;
        }
        
        return (names, voteCounts);
    }
    
    function startVoting() public onlyAdmin votingIsInactive {
        require(candidatesCount > 0, "No candidates registered");
        votingActive = true;
        emit VotingStarted();
    }
    
    function endVoting() public onlyAdmin votingIsActive {
        votingActive = false;
        emit VotingEnded();
    }
    
    // Additional utility functions
    function getWinner() public view returns (string memory winnerName, uint winnerVotes) {
        require(!votingActive, "Voting is still active");
        require(candidatesCount > 0, "No candidates available");
        
        uint winningVoteCount = 0;
        uint winnerId = 0;
        
        for (uint i = 1; i <= candidatesCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winnerId = i;
            }
        }
        
        if (winnerId > 0) {
            return (candidates[winnerId].name, winningVoteCount);
        } else {
            return ("No winner", 0);
        }
    }
    
    function getVoterInfo(address _voter) public view returns (bool registered, bool voted, uint candidateId) {
        Voter memory voter = voters[_voter];
        return (voter.isRegistered, voter.hasVoted, voter.votedCandidateId);
    }
    
    function getCandidateInfo(uint _candidateId) public view returns (string memory name, uint voteCount) {
        require(candidates[_candidateId].exists, "Candidate does not exist");
        return (candidates[_candidateId].name, candidates[_candidateId].voteCount);
    }
}
